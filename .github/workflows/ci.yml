# ------------------------------------------------------------------------------
# .NET CI Workflow
#
# Purpose:
#   A secure, optimized CI pipeline for the .NET Tic Tac Toe microservices project.
#   Automatically validates every pull request and push to main/master branches
#   through comprehensive security scanning, building, testing, and reporting.
#
# Security Features:
#   - Dependency vulnerability scanning using GitHub's dependency-review-action
#   - Secrets detection and prevention using TruffleHog
#   - Container vulnerability scanning (if containers are present)
#   - Principle of Least Privilege token permissions
#   - Early security validation before build process
#
# Performance Features:
#   - Intelligent NuGet package caching for faster builds
#   - Separated test execution (unit vs integration) for efficiency
#   - Incremental builds with --no-restore optimization
#
# Quality Features:
#   - Code coverage collection with XPlat Code Coverage
#   - Static code analysis and quality gates
#   - Rich test result reporting in pull request interface
#   - Detailed artifacts for debugging and analysis
#   - 7-day artifact retention for post-analysis
#
# Workflow Jobs:
#   Job 1 (unit-tests): Fast feedback with unit tests only
#   Job 2 (integration-and-security-tests): Security scanning + integration tests
# ------------------------------------------------------------------------------
name: .NET CI

on:
  pull_request:
    branches: [ "main", "master" ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '**.sln'
      - '**.csproj'
      - '.github/workflows/ci.yml'
  push:
    branches: [ "main", "master" ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '**.sln'
      - '**.csproj'
      - '.github/workflows/ci.yml'

jobs:
  # JOB 1: Fast feedback with unit tests only
  unit-tests:
    name: Build & Unit Tests
    runs-on: ubuntu-latest
    
    # SECURITY BEST PRACTICE: Restrict permissions for the GITHUB_TOKEN.
    permissions:
      contents: read      # Allow checkout
      pull-requests: read # Allow PR-based actions
      checks: write       # Allow test-reporter to publish a check
      actions: read       # Allow discovering actions

    steps:
      # STEP 1: Retrieve source code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # STEP 2: Configure .NET 9.0.x development environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.200'

      # STEP 3: Performance optimization - restore NuGet packages from cache
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # STEP 4: Download project dependencies from NuGet
      - name: Restore dependencies
        run: dotnet restore ./TicTacToe.sln

      # STEP 5: Compile the solution in Release configuration
      - name: Build solution
        run: dotnet build ./TicTacToe.sln --no-restore --configuration Release
      
      # STEP 6: Run ONLY the unit tests (Domain + Configuration) for fast feedback
      - name: Run unit tests
        run: >
          dotnet test ./TicTacToe.sln --no-build --no-restore --configuration Release
          --filter "Category=Unit" 
          --results-directory ./test-results/
          --logger "trx;LogFileName=unit-test-results.trx"

      # STEP 7: Upload unit test results immediately
      - name: Upload unit test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: ./test-results/unit-test-results.trx
          retention-days: 7

  # JOB 2: Security scanning and slower integration tests
  integration-and-security-tests:
    name: Integration & Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests # CRITICAL: This job only runs if unit-tests job succeeds

    # SECURITY BEST PRACTICE: Restrict permissions for the GITHUB_TOKEN.
    permissions:
      contents: read      # Allow checkout
      pull-requests: read # Allow PR-based actions (like dependency-review)
      checks: write       # Allow test-reporter to publish a check
      actions: read       # Allow discovering actions
      security-events: write # Allow security scanning results

    steps:
      # STEP 1: Retrieve source code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # STEP 2: Security validation - scan for vulnerable dependencies
      - name: Dependency Review
        uses: actions/dependency-review-action@v4

      # STEP 3: Secrets detection - scan for hardcoded secrets and credentials
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha || github.sha }}
          head: ${{ github.sha }}

      # STEP 4: Configure .NET 9.0.x development environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.200'

      # STEP 5: Performance optimization - restore NuGet packages from cache
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # STEP 6: Restore ALL dependencies
      - name: Restore ALL dependencies
        run: dotnet restore ./TicTacToe.sln

      # STEP 7: Build ALL projects
      - name: Build ALL projects
        run: dotnet build ./TicTacToe.sln --no-restore --configuration Release

      # STEP 8: Run Vulnerability Scan AFTER build
      - name: Run Security Analysis for Vulnerable Packages
        run: dotnet list ./TicTacToe.sln package --vulnerable --include-transitive

      # STEP 9: Container vulnerability scanning (if Dockerfiles are present)
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      # STEP 10: Run ONLY the integration tests with coverage collection
      - name: Run integration tests with coverage
        run: >
          dotnet test ./TicTacToe.sln --no-build --no-restore --configuration Release
          --filter "Category=Integration"
          --collect:"XPlat Code Coverage"
          --results-directory ./test-results/
          --logger "trx;LogFileName=integration-test-results.trx"

      # STEP 11: Publish test results to pull request interface
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: ./test-results/integration-test-results.trx
          reporter: dotnet-trx

      # STEP 12: Upload detailed reports and coverage data for analysis
      - name: Upload test & coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-and-coverage-results
          path: |
            ./test-results/
            trivy-results.sarif
          retention-days: 7

      # STEP 13: Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 