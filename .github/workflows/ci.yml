# ------------------------------------------------------------------------------
# .NET + Next.js CI Workflow
#
# Purpose:
#   A secure, optimized CI pipeline for the .NET Tic Tac Toe microservices project
#   with Next.js frontend. Follows "build once, test the artifact" principle by 
#   building Docker images and testing the actual containers that will be deployed.
#
# Security Features:
#   - Dependency vulnerability scanning using GitHub's dependency-review-action
#   - Secrets detection and prevention using TruffleHog
#   - Container vulnerability scanning using Trivy on built images
#   - Principle of Least Privilege token permissions
#   - Early security validation before build process
#
# Performance Features:
#   - Intelligent NuGet package caching for faster builds
#   - Node.js dependency caching for frontend builds
#   - Separated test execution (unit vs integration) for efficiency
#   - Incremental builds with --no-restore optimization
#
# Quality Features:
#   - Code coverage collection with XPlat Code Coverage
#   - Static code analysis and quality gates
#   - Rich test result reporting in pull request interface
#   - Detailed artifacts for debugging and analysis
#   - 7-day artifact retention for post-analysis
#
# Workflow Jobs:
#   Job 1 (unit-tests): Fast feedback with unit tests only (backend + frontend)
#   Job 2 (build-and-integration-test): Build Docker images, scan them, and test live containers
# ------------------------------------------------------------------------------
name: .NET + Next.js CI

on:
  pull_request:
    branches: [ "main", "master" ]
    paths:
      - 'src/'
      - 'tests/'
      - 'aspire/'
      - '.sln'
      - '.csproj'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/ci.yml'
      - 'Dockerfile*'
  push:
    branches: [ "main", "master" ]
    paths:
      - 'src/'
      - 'tests/'
      - 'aspire/'
      - '.sln'
      - '.csproj'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/ci.yml'
      - 'Dockerfile*'

jobs:
  # JOB 1: Fast feedback with unit tests only (backend + frontend)
  unit-tests:
    name: Build & Unit Tests
    runs-on: ubuntu-latest
    
    # SECURITY BEST PRACTICE: Restrict permissions for the GITHUB_TOKEN.
    permissions:
      contents: read      # Allow checkout
      pull-requests: read # Allow PR-based actions
      checks: write       # Allow test-reporter to publish a check
      actions: read       # Allow discovering actions

    steps:
      # STEP 1: Retrieve source code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # STEP 2: Configure .NET 9.0.x development environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.200'

      # STEP 3: Configure Node.js environment for frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'src/TicTacToe.WebUI/package-lock.json'

      # STEP 4: Performance optimization - restore NuGet packages from cache
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # STEP 5: Download project dependencies from NuGet
      - name: Restore .NET dependencies
        run: dotnet restore ./TicTacToe.sln

      # STEP 6: Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd src/TicTacToe.WebUI
          npm ci

      # STEP 7: Compile the solution in Release configuration
      - name: Build .NET solution
        run: dotnet build ./TicTacToe.sln --no-restore --configuration Release
      
      # STEP 8: Build frontend (type checking and compilation)
      - name: Build frontend
        run: |
          cd src/TicTacToe.WebUI
          npm run build
      
      # STEP 9: Run backend unit tests
      - name: Run backend unit tests
        run: >
          dotnet test ./TicTacToe.sln --no-build --no-restore --configuration Release
          --filter "Category=Unit" 
          --results-directory ./test-results/
          --logger "trx;LogFileName=backend-unit-test-results.trx"

      # STEP 10: Run frontend unit tests
      - name: Run frontend unit tests
        run: |
          cd src/TicTacToe.WebUI
          npm test -- --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      # STEP 11: Upload test results
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            ./test-results/backend-unit-test-results.trx
            ./src/TicTacToe.WebUI/coverage/
          retention-days: 7

  # JOB 2: Build Docker images, scan them, and run integration tests against the live containers
  build-and-integration-test:
    name: Docker Build, Scan & Integration Test
    runs-on: ubuntu-latest
    needs: unit-tests # CRITICAL: Only runs if unit tests pass

    permissions:
      contents: read
      pull-requests: read
      checks: write
      actions: read
      security-events: write

    steps:
      # STEP 1: Retrieve source code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Early Security Scans (on source code) ---
      # STEP 2: Security validation - scan for vulnerable dependencies
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request' # Only run on PRs
        with:
          # Reduce output size to prevent GitHub Actions step summary limit (1024k)
          fail-on-severity: moderate  # Only fail on moderate+ vulnerabilities
          allow-licenses: MIT,Apache-2.0,ISC,BSD-2-Clause,BSD-3-Clause,Unlicense,CC0-1.0,0BSD,CC-BY-4.0,LGPL-2.0-only,LGPL-2.1-only,LGPL-3.0-only,LGPL-3.0-or-later,MPL-2.0,LicenseRef-scancode-alliance-open-media-patent-1.0,LicenseRef-scancode-other-permissive
          # Disable scorecard to reduce output size
          show-openssf-scorecard: false
          # Disable PR comments to reduce output
          comment-summary-in-pr: false

      # STEP 3: Secrets detection - scan for hardcoded secrets and credentials
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha || github.sha }}
          head: ${{ github.sha }}

      # STEP 4: Setup .NET environment for integration tests
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.200'

      # STEP 5: Setup Node.js for frontend tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'src/TicTacToe.WebUI/package-lock.json'

      # --- Docker Image Build Stage ---
      # STEP 6: Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # STEP 7: Build GameEngine Docker image
      - name: Build GameEngine Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./GameEngine.Dockerfile
          tags: tictactoe-gameengine:ci # Tag for use in this workflow
          load: true # Make the image available to the Docker engine on the runner
          push: false # Do not push to a registry

      # STEP 8: Build GameSession Docker image
      - name: Build GameSession Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./GameSession.Dockerfile
          tags: tictactoe-gamesession:ci
          load: true
          push: false

      # STEP 9: Build WebUI Docker image
      - name: Build WebUI Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/TicTacToe.WebUI
          file: ./WebUI.Dockerfile
          tags: tictactoe-webui:ci
          load: true
          push: false

      # --- Security Scan Stage (on the built images) ---
      # STEP 10: Run Trivy to scan GameEngine image
      - name: Run Trivy to scan GameEngine image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tictactoe-gameengine:ci' # Scan the image artifact
          format: 'sarif'
          output: 'trivy-game-engine-results.sarif'
          severity: 'CRITICAL,HIGH'

      # STEP 11: Run Trivy to scan GameSession image
      - name: Run Trivy to scan GameSession image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tictactoe-gamesession:ci' # Scan the image artifact
          format: 'sarif'
          output: 'trivy-game-session-results.sarif'
          severity: 'CRITICAL,HIGH'

      # STEP 12: Run Trivy to scan WebUI image
      - name: Run Trivy to scan WebUI image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tictactoe-webui:ci' # Scan the image artifact
          format: 'sarif'
          output: 'trivy-webui-results.sarif'
          severity: 'CRITICAL,HIGH'

      # STEP 13: Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          # The action will find and upload all .sarif files in the root directory
          sarif_file: .

      # --- Integration Test Stage (against live containers) ---
      # STEP 14: Run backend integration tests against live containers
      - name: Run backend integration tests against containers
        run: |
          # 1. Create a docker-compose file to orchestrate our services for the test run.
          # This is the CI equivalent of what your Aspire AppHost does for local dev.
          cat <<EOF > docker-compose.ci.yml
          version: '3.8'
          services:
            game-engine:
              image: tictactoe-gameengine:ci
              hostname: game-engine
              ports:
                - "8080:8080"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/alive"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 30s
            game-session:
              image: tictactoe-gamesession:ci
              ports:
                - "8081:8081"
              environment:
                # This is how GameSession finds GameEngine inside the Docker network
                - GameEngine__BaseUrl=http://game-engine:8080
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8081/alive"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 30s
              depends_on:
                game-engine:
                  condition: service_healthy
          EOF

          # 2. Start the services in the background
          docker compose -f docker-compose.ci.yml up -d

          # 3. Wait for services to be healthy before running tests
          echo "Waiting for services to become healthy..."
          timeout 60 bash -c 'until docker compose -f docker-compose.ci.yml ps | grep -q "healthy"; do sleep 5; done' || echo "Services may not be fully healthy, proceeding with tests"

          # 4. Set up .NET environment to run the test project
          # Note: We are NOT building the main apps, just the test project
          dotnet restore ./tests/TicTacToe.GameSession.Tests/TicTacToe.GameSession.Tests.csproj
          dotnet build ./tests/TicTacToe.GameSession.Tests/TicTacToe.GameSession.Tests.csproj --no-restore

          # 5. Run the container integration tests. These tests make actual HTTP calls
          # to http://localhost:8080 and http://localhost:8081, which are mapped to our containers.
          dotnet test ./tests/TicTacToe.GameSession.Tests/TicTacToe.GameSession.Tests.csproj --no-build --filter "Category=ContainerIntegration" --logger "trx;LogFileName=integration-test-results.trx" --results-directory ./test-results/

      # STEP 15: Run frontend E2E tests
      - name: Run frontend E2E tests
        run: |
          cd src/TicTacToe.WebUI
          
          # Install Playwright browsers
          npx playwright install --with-deps chromium
          
          # Run E2E tests (basic UI rendering test that doesn't require backend)
          npx playwright test --project=chromium --reporter=list
        env:
          CI: true

      # STEP 16: Stop containers (cleanup)
      - name: Stop containers
        if: always() # This step runs even if the tests fail
        run: |
          docker compose -f docker-compose.ci.yml down

      # --- Reporting Stage ---
      # STEP 17: Publish test results to pull request interface
      - name: Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Integration Test Results
          path: ./test-results/integration-test-results.trx
          reporter: dotnet-trx

      # STEP 18: Upload detailed reports and coverage data for analysis
      - name: Upload test & coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-and-coverage-results
          path: |
            ./test-results/
            trivy-*-results.sarif
            docker-compose.ci.yml
          retention-days: 7 