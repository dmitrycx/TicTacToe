//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class GameSessionClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : (typeof window !== 'undefined' ? window as any : globalThis as any);
        // Use Aspire-injected service URL or fallback to provided baseUrl or default
        this.baseUrl = baseUrl ?? (typeof window !== 'undefined' 
            ? (window as any).__NEXT_DATA__?.props?.pageProps?.gameSessionServiceUrl 
            : process.env.NEXT_PUBLIC_GAME_SESSION_SERVICE_URL) ?? "http://localhost:37053";
    }

    /**
     * Creates a new game session.
     * @return The created session details.
     */
    ticTacToeGameSessionEndpointsCreateSessionEndpoint(): Promise<TicTacToeGameSessionEndpointsCreateSessionResponse> {
        let url_ = this.baseUrl + "/sessions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTicTacToeGameSessionEndpointsCreateSessionEndpoint(_response);
        });
    }

    protected processTicTacToeGameSessionEndpointsCreateSessionEndpoint(response: Response): Promise<TicTacToeGameSessionEndpointsCreateSessionResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = TicTacToeGameSessionEndpointsCreateSessionResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicTacToeGameSessionEndpointsCreateSessionResponse>(null as any);
    }

    /**
     * Lists all game sessions.
     * @return List of all sessions.
     */
    ticTacToeGameSessionEndpointsListSessionsEndpoint(): Promise<TicTacToeGameSessionEndpointsListSessionsResponse> {
        let url_ = this.baseUrl + "/sessions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTicTacToeGameSessionEndpointsListSessionsEndpoint(_response);
        });
    }

    protected processTicTacToeGameSessionEndpointsListSessionsEndpoint(response: Response): Promise<TicTacToeGameSessionEndpointsListSessionsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TicTacToeGameSessionEndpointsListSessionsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicTacToeGameSessionEndpointsListSessionsResponse>(null as any);
    }

    /**
     * Deletes a session by ID.
     * @return Session successfully deleted.
     */
    ticTacToeGameSessionEndpointsDeleteSessionEndpoint(sessionId: string): Promise<TicTacToeGameSessionEndpointsDeleteSessionResponse> {
        let url_ = this.baseUrl + "/sessions/{sessionId}";
        if (sessionId === undefined || sessionId === null)
            throw new Error("The parameter 'sessionId' must be defined.");
        url_ = url_.replace("{sessionId}", encodeURIComponent("" + sessionId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTicTacToeGameSessionEndpointsDeleteSessionEndpoint(_response);
        });
    }

    protected processTicTacToeGameSessionEndpointsDeleteSessionEndpoint(response: Response): Promise<TicTacToeGameSessionEndpointsDeleteSessionResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TicTacToeGameSessionEndpointsDeleteSessionResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Session not found.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicTacToeGameSessionEndpointsDeleteSessionResponse>(null as any);
    }

    /**
     * Gets a session by ID.
     * @return The session details.
     */
    ticTacToeGameSessionEndpointsGetSessionEndpoint(sessionId: string): Promise<TicTacToeGameSessionEndpointsGetSessionResponse> {
        let url_ = this.baseUrl + "/sessions/{sessionId}";
        if (sessionId === undefined || sessionId === null)
            throw new Error("The parameter 'sessionId' must be defined.");
        url_ = url_.replace("{sessionId}", encodeURIComponent("" + sessionId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTicTacToeGameSessionEndpointsGetSessionEndpoint(_response);
        });
    }

    protected processTicTacToeGameSessionEndpointsGetSessionEndpoint(response: Response): Promise<TicTacToeGameSessionEndpointsGetSessionResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TicTacToeGameSessionEndpointsGetSessionResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Session not found.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicTacToeGameSessionEndpointsGetSessionResponse>(null as any);
    }

    /**
     * Simulates a complete game for the specified session.
     * @return The simulation results.
     */
    ticTacToeGameSessionEndpointsSimulateGameEndpoint(sessionId: string, simulateGameRequest: TicTacToeGameSessionEndpointsSimulateGameRequest): Promise<TicTacToeGameSessionEndpointsSimulateGameResponse> {
        let url_ = this.baseUrl + "/sessions/{sessionId}/simulate";
        if (sessionId === undefined || sessionId === null)
            throw new Error("The parameter 'sessionId' must be defined.");
        url_ = url_.replace("{sessionId}", encodeURIComponent("" + sessionId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(simulateGameRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTicTacToeGameSessionEndpointsSimulateGameEndpoint(_response);
        });
    }

    protected processTicTacToeGameSessionEndpointsSimulateGameEndpoint(response: Response): Promise<TicTacToeGameSessionEndpointsSimulateGameResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TicTacToeGameSessionEndpointsSimulateGameResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Session not found.", status, _responseText, _headers);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Session is not in Created state", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TicTacToeGameSessionEndpointsSimulateGameResponse>(null as any);
    }
}

/** Response DTO for creating a session. */
export class TicTacToeGameSessionEndpointsCreateSessionResponse implements ITicTacToeGameSessionEndpointsCreateSessionResponse {
    sessionId?: string;
    status?: string;

    constructor(data?: ITicTacToeGameSessionEndpointsCreateSessionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionId = _data["sessionId"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsCreateSessionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsCreateSessionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId;
        data["status"] = this.status;
        return data;
    }
}

/** Response DTO for creating a session. */
export interface ITicTacToeGameSessionEndpointsCreateSessionResponse {
    sessionId?: string;
    status?: string;
}

/** Response DTO for deleting a session. */
export class TicTacToeGameSessionEndpointsDeleteSessionResponse implements ITicTacToeGameSessionEndpointsDeleteSessionResponse {
    success?: boolean;
    message?: string;

    constructor(data?: ITicTacToeGameSessionEndpointsDeleteSessionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsDeleteSessionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsDeleteSessionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        return data;
    }
}

/** Response DTO for deleting a session. */
export interface ITicTacToeGameSessionEndpointsDeleteSessionResponse {
    success?: boolean;
    message?: string;
}

/** Request model for deleting a session. */
export class TicTacToeGameSessionEndpointsDeleteSessionRequest implements ITicTacToeGameSessionEndpointsDeleteSessionRequest {

    constructor(data?: ITicTacToeGameSessionEndpointsDeleteSessionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsDeleteSessionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsDeleteSessionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** Request model for deleting a session. */
export interface ITicTacToeGameSessionEndpointsDeleteSessionRequest {
}

/** Response DTO for getting a session. */
export class TicTacToeGameSessionEndpointsGetSessionResponse implements ITicTacToeGameSessionEndpointsGetSessionResponse {
    sessionId?: string;
    gameId?: string;
    status?: string;
    createdAt?: Date;
    startedAt?: Date | undefined;
    completedAt?: Date | undefined;
    moves?: TicTacToeGameSessionEndpointsMoveInfo[];
    winner?: string | undefined;
    result?: string | undefined;

    constructor(data?: ITicTacToeGameSessionEndpointsGetSessionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionId = _data["sessionId"];
            this.gameId = _data["gameId"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.startedAt = _data["startedAt"] ? new Date(_data["startedAt"].toString()) : <any>undefined;
            this.completedAt = _data["completedAt"] ? new Date(_data["completedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["moves"])) {
                this.moves = [] as any;
                for (let item of _data["moves"])
                    this.moves!.push(TicTacToeGameSessionEndpointsMoveInfo.fromJS(item));
            }
            this.winner = _data["winner"];
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsGetSessionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsGetSessionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId;
        data["gameId"] = this.gameId;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["startedAt"] = this.startedAt ? this.startedAt.toISOString() : <any>undefined;
        data["completedAt"] = this.completedAt ? this.completedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.moves)) {
            data["moves"] = [];
            for (let item of this.moves)
                data["moves"].push(item ? item.toJSON() : <any>undefined);
        }
        data["winner"] = this.winner;
        data["result"] = this.result;
        return data;
    }
}

/** Response DTO for getting a session. */
export interface ITicTacToeGameSessionEndpointsGetSessionResponse {
    sessionId?: string;
    gameId?: string;
    status?: string;
    createdAt?: Date;
    startedAt?: Date | undefined;
    completedAt?: Date | undefined;
    moves?: TicTacToeGameSessionEndpointsMoveInfo[];
    winner?: string | undefined;
    result?: string | undefined;
}

/** Move information DTO. */
export class TicTacToeGameSessionEndpointsMoveInfo implements ITicTacToeGameSessionEndpointsMoveInfo {
    row?: number;
    column?: number;
    player?: string;

    constructor(data?: ITicTacToeGameSessionEndpointsMoveInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.row = _data["row"];
            this.column = _data["column"];
            this.player = _data["player"];
        }
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsMoveInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsMoveInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["row"] = this.row;
        data["column"] = this.column;
        data["player"] = this.player;
        return data;
    }
}

/** Move information DTO. */
export interface ITicTacToeGameSessionEndpointsMoveInfo {
    row?: number;
    column?: number;
    player?: string;
}

/** Request model for getting a session by ID. */
export class TicTacToeGameSessionEndpointsGetSessionRequest implements ITicTacToeGameSessionEndpointsGetSessionRequest {

    constructor(data?: ITicTacToeGameSessionEndpointsGetSessionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsGetSessionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsGetSessionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** Request model for getting a session by ID. */
export interface ITicTacToeGameSessionEndpointsGetSessionRequest {
}

/** Response DTO for listing sessions. */
export class TicTacToeGameSessionEndpointsListSessionsResponse implements ITicTacToeGameSessionEndpointsListSessionsResponse {
    sessions?: TicTacToeGameSessionEndpointsSessionSummary[];

    constructor(data?: ITicTacToeGameSessionEndpointsListSessionsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sessions"])) {
                this.sessions = [] as any;
                for (let item of _data["sessions"])
                    this.sessions!.push(TicTacToeGameSessionEndpointsSessionSummary.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsListSessionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsListSessionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sessions)) {
            data["sessions"] = [];
            for (let item of this.sessions)
                data["sessions"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

/** Response DTO for listing sessions. */
export interface ITicTacToeGameSessionEndpointsListSessionsResponse {
    sessions?: TicTacToeGameSessionEndpointsSessionSummary[];
}

/** Summary information for a session. */
export class TicTacToeGameSessionEndpointsSessionSummary implements ITicTacToeGameSessionEndpointsSessionSummary {
    sessionId?: string;
    status?: string;
    createdAt?: Date;
    moveCount?: number;
    winner?: string | undefined;

    constructor(data?: ITicTacToeGameSessionEndpointsSessionSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionId = _data["sessionId"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.moveCount = _data["moveCount"];
            this.winner = _data["winner"];
        }
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsSessionSummary {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsSessionSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["moveCount"] = this.moveCount;
        data["winner"] = this.winner;
        return data;
    }
}

/** Summary information for a session. */
export interface ITicTacToeGameSessionEndpointsSessionSummary {
    sessionId?: string;
    status?: string;
    createdAt?: Date;
    moveCount?: number;
    winner?: string | undefined;
}

/** Response DTO for game simulation. */
export class TicTacToeGameSessionEndpointsSimulateGameResponse implements ITicTacToeGameSessionEndpointsSimulateGameResponse {
    sessionId?: string;
    isCompleted?: boolean;
    winner?: string | undefined;
    moves?: TicTacToeGameSessionEndpointsMoveInfo[];

    constructor(data?: ITicTacToeGameSessionEndpointsSimulateGameResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionId = _data["sessionId"];
            this.isCompleted = _data["isCompleted"];
            this.winner = _data["winner"];
            if (Array.isArray(_data["moves"])) {
                this.moves = [] as any;
                for (let item of _data["moves"])
                    this.moves!.push(TicTacToeGameSessionEndpointsMoveInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsSimulateGameResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsSimulateGameResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId;
        data["isCompleted"] = this.isCompleted;
        data["winner"] = this.winner;
        if (Array.isArray(this.moves)) {
            data["moves"] = [];
            for (let item of this.moves)
                data["moves"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

/** Response DTO for game simulation. */
export interface ITicTacToeGameSessionEndpointsSimulateGameResponse {
    sessionId?: string;
    isCompleted?: boolean;
    winner?: string | undefined;
    moves?: TicTacToeGameSessionEndpointsMoveInfo[];
}

/** Request model for simulating a game. */
export class TicTacToeGameSessionEndpointsSimulateGameRequest implements ITicTacToeGameSessionEndpointsSimulateGameRequest {
    moveStrategy?: TicTacToeGameSessionDomainEnumsMoveType | undefined;

    constructor(data?: ITicTacToeGameSessionEndpointsSimulateGameRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.moveStrategy = _data["moveStrategy"];
        }
    }

    static fromJS(data: any): TicTacToeGameSessionEndpointsSimulateGameRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TicTacToeGameSessionEndpointsSimulateGameRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["moveStrategy"] = this.moveStrategy;
        return data;
    }
}

/** Request model for simulating a game. */
export interface ITicTacToeGameSessionEndpointsSimulateGameRequest {
    moveStrategy?: TicTacToeGameSessionDomainEnumsMoveType | undefined;
}

/** Represents the type of move generation strategy used. */
export enum TicTacToeGameSessionDomainEnumsMoveType {
    Random = "Random",
    RuleBased = "RuleBased",
    AI = "AI",
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}